{"version":3,"sources":["MemoryTile.js","Timer.js","Moves.js","Controls.js","Winner.js","MemoryBoard.js","App.js","serviceWorker.js","index.js"],"names":["MemoryTile","props","style","border","borderRadius","boxShadow","color","fontWeight","margin","height","textAlign","width","className","status","icon","Timer","React","useState","time","setTime","useEffect","timer","setInterval","clearInterval","marginLeft","Math","floor","Moves","count","Controls","onClick","pause","fontSize","reset","Winner","backgroundImage","lineHeight","position","visibility","isDisplayed","zIndex","MemoryBoard","tiles","setTiles","matches","setMatches","active_timer","start_timer","counter","addMove","win_notification","notify_winner","icons","forEach","seed","random","length","push","splice","toString","map","x","index","key","stack","pause_button","tile","target","innerText","persist","includes","match","setTimeout","display","alignItems","flexFlow","e","preventDefault","window","location","reload","App","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.123d8315.chunk.js","sourcesContent":["import React from 'react';\nimport './MemoryTile.css';\n\nfunction MemoryTile(props) {\n    const styles = {\n        tile: {\n            border: '1px solid rgb(10,10,10)',\n            borderRadius: '5px',\n            boxShadow: '3px 3px 10px rgba(20,20,20,0.3)',\n            color: 'black',\n            fontWeight: 'bolder',\n            margin: '2px',\n            height: '90px',\n            textAlign: 'center',\n            width: '90px'\n        }\n    }\n\n    return <span style={styles.tile} className={props.status}>{props.icon}</span>\n}\n\nexport default MemoryTile;\n","import React from 'react';\n\nfunction Timer (props) {\n    const [time, setTime] = React.useState(0);\n\n    React.useEffect(() => {\n        if (props.status) {\n            const timer = setInterval( () => {\n                setTime(time + 1);\n            }, 1000);\n        return () => clearInterval(timer);\n        }\n    });\n\n    return ( <span style={{width: '100px', marginLeft: '20px'}}>Time: {Math.floor(time)}</span> );\n}\n\nexport default Timer;\n","import React from 'react';\n\nfunction Moves(props) {\n    return <span style={{width: '100px', marginLeft: '20px'}}>Moves: {props.count}</span>\n}\n\nexport default Moves;","import React from 'react';\n\nfunction Controls (props) {\n    return (\n        <span style={{width: '95px', marginLeft: '110px'}}>\n            <i onClick={props.pause} style={{fontSize: '35px'}} className=\"material-icons\">\n                    {props.status ? `pause_circle_filled` : `play_circle_filled`}\n            </i>\n            <i onClick={props.reset} style={{fontSize: '35px'}} className=\"material-icons\">replay</i>\n        </span>\n    );\n}\n\nexport default Controls;\n","import React from 'react';\n\nfunction Winner(props) {\n    const style = {\n        backgroundImage: 'radial-gradient(circle, white, rgba(10,220,50,0.75))',\n        borderRadius: '3px',\n        textAlign: 'center',\n        fontSize: '3.9em',\n        height: '362px',\n        lineHeight: '362px',\n        margin: '16px 22px',\n        position: 'absolute',\n        visibility: props.isDisplayed ? null : 'hidden',\n        width: '362px',\n        zIndex: 1,\n    }\n\n    return (\n        <span style={style}>WINNER!</span>\n    )\n}\n\nexport default Winner;\n","import React from 'react';\nimport MemoryTile from './MemoryTile';\nimport Timer from './Timer';\nimport Moves from './Moves';\nimport Controls from './Controls';\nimport Winner from './Winner';\nimport './MemoryBoard.css';\n\n/* ---- playing surface container ---- */\nfunction MemoryBoard(props) {\n    // game state\n    const [tiles, setTiles] = React.useState([]);\n    const [matches, setMatches] = React.useState(0);\n    const [active_timer, start_timer] = React.useState(true);\n    const [counter, addMove] = React.useState(0);\n    const [win_notification, notify_winner] = React.useState(false);\n\n    // setup the board\n    React.useEffect(() => {\n        //shuffle\n        props.icons.forEach( () => {\n            const seed = Math.floor((Math.random() * (props.icons.length-1)) + 0);\n            props.icons.push(props.icons.splice(seed, 1).toString());\n        })\n\n        // place tiles\n        setTiles(props.icons.map( (x, index) => {\n            return <MemoryTile key={index} status={'memory_closed'} icon={x} />\n        }))\n\n    }, [props.icons])\n\n    // win condition\n    React.useEffect(() => {\n        if (matches === props.icons.length / 2) {\n            start_timer(false);\n            notify_winner(true)\n        }\n    }, [matches, start_timer, props.icons])\n\n\n    // game play\n    const stack = [];\n\n    const pause_button = () => {\n        // flush the stack on pause\n        stack.forEach((tile) => {tile.className = 'memory_closed'})\n        stack.length = 0\n\n        start_timer(!active_timer)\n    }\n\n    const reset_button = (e) => {\n        e.preventDefault();\n        window.location.reload();\n    }\n\n    const click_tile = (tile) => {\n        // ensure clicking on tile (and not surrounding board space)\n        if (tile.target.innerText.length === 1) {\n            tile.persist()\n\n            // if tile not in stack & not already matched, add to stack & make visible\n            if (!stack.includes(tile.target) && (!tile.target.className.includes('matched'))) {\n                stack.push(tile.target)\n                tile.target.className = 'memory_opened'\n            }\n\n            // if 2 tiles, compare\n            if (stack.length === 2) {\n                addMove(counter + 1)\n                let match = false;\n\n                if (stack[0].innerText === stack[1].innerText) {\n                    stack.forEach( (tile) => tile.className = 'memory_matched');\n                    match = true;\n                } else {\n                    stack.forEach( (tile) => setTimeout( () => tile.className = 'memory_closed', 1000));\n                }\n\n                if (match) { setMatches(matches + 1)}\n\n                // flush the stack\n                stack.length = 0\n            }\n        }\n    }\n\n    return (\n            <div onClick={active_timer === false ? pause_button : null} >\n                <Winner isDisplayed={win_notification}/>\n                <div className=\"memory_board\" onClick={click_tile}> {tiles} </div>\n                <div style={{display: 'flex', alignItems: 'center', flexFlow: 'row nowrap',\n                            margin: '10px', width: '380px'}}>\n                    <Timer status={active_timer}/>\n                    <Moves count={counter} />\n                    <Controls status={active_timer}\n                              pause={pause_button}\n                              reset={reset_button}/>\n                </div>\n        </div>\n    )\n}\n\nexport default MemoryBoard;\n","import React from 'react';\nimport MemoryBoard from './MemoryBoard';\n\nfunction App() {\n    // tile characters\n    const icons = ['∀','∀','∃','∃','∈','∈','∧','∧','∨','∨','∩','∩','∪','∪','⊕','⊕'];\n\n    return <MemoryBoard icons={icons}/>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}